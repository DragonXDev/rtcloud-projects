Realtime Atten Experiment Notes:

Each Run has 8 blocks in it divided into 4-block phases
Phase one is 4 blocks of training - two blocks of face and two of scene training
Phase two is 4 blocks of testing
During each block only one task is done, i.e. look at faces, look at indoor scenes etc.
-----
Before each phase is 3 TRs of show plus sign
Then a block consists of
TR 1 -  instructions (i.e. look for indoor places, or look for female faces)
TR 2-26 stimuli
TR 27-28 interblock interval (show plus sign)
TR 29 - instructions
TR 30-54 next block stimuli
TR 55-56 interblock interval (show plus sign)
etc...
So a Phase will have 3 TRs that preceed the phase plus 4 blocks x 28 TRs gives 3+112 or total of 115 TRs in a Phase. A Run has two phases so 230 TRs
-----
When processing a block, the brain response is assumed to be present 2 TRs after the stimulus. So TRs 1-3 are prePhase blank, 4 is instructions, 5 1st stimulus, so 7 is response to 1st stimulus.

patterns.regressor is a (2, 230) matrix of booleans which indicates when stimulus was shown for each TR in a Run. Row 1 indicates if face stimulus was shown, row 2 if scene stimulus was shown.

In each TR, 2 images are shown. All images have both face and scene, but the person is instructed to pay attention to only one or the other by having a task such as identify indoor scenes or female faces.

Whether the scene is indoor/outdoor or male/female doesn't matter, it's just an extra task to get the subject to pay more attention. It's only face/scene classification that is happening.
-----
For each test the previous 8 blocks of training data are used for the model but not including training in the current Run. And Run 1 is only training. (Use notation RunNum.PhaseNum, i.e. 2.1, 2.2 etc). And notation modelN(2.1, 3.1) would indicate the model generated in the Nth run comprised of training from RunPhase 2.1 and 3.1.
So... 
Run 2.2 uses model1(1.1, 1.2)
Run 3.2 uses model2(1.2, 2.1)
Run 4.2 uses model3(2.1, 3.1)
Run (N+1).2 uses modelN(N-1.1, N.1)
etc...
-----
The pattens design file has the experiment setup information, i.e. what stimulus will be shown, which will be training, which testing etc. So for each Run we load it's patterns design file.
Into the patterns datastruct (from patterns design) we add the raw, raw_sm, raw_sm_filt, raw_sm_filt_z data and save it out an patternsdata_N_Date for that current run N.
In a Run N (N>1) we load in the previous patternsdata file because we need some variant of the raw data from the previous plus current phase 1 to train the model that will be used for the next run, and we need the mean and stddev values from the previous to calculate the z scores against (because we don't add the rolling realtime values to mean and stddev)
-----
patterns.regressor - 2 x 230, bool whether instructions were to attend to face or scene for that TR, a 1 in row1:face or in row2:scene
patterns.block - 1 x 230, which block each TR belongs to
patterns.nTRs - 1 int, number of TRs in run
patterns.lastVolPhase1 - 1 int, which TR is final vol in phase 1
patterns.firstVolPhase2 - 1 int, which TR is first vol in phase 2
patterns.TR - 1 int, number of seconds in a TR
patterns.disdaqs - 1 int, number of seconds skipped at beginning of each phase (?? what stands for)
patterns.stim - 1 x 230, whether stimulus was supplied in that TR
patterns.type - 1 x 230, 1=training, 2=testing
patterns.attCateg - 1 x 230, index of which they are attending face/scene in that TR, 1=face, 2=scene
patterns.activations - 2 x 230 level of response from categorization (i.e. using model)
patterns.predict - 1 x 230 - whether predicting scene of face
patterns.categoryseparation - how confident the categorization (1 is best meaning the activations were 0, 1)

